# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RoadBuilder
                                 A QGIS plugin
 Плагин строит дороги по заданным ВУ
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-14
        git sha              : $Format:%H$
        copyright            : (C) 2022 by alexnick
        email                : alexnick_ank@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem
from qgis.gui import QgsDoubleValidator

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .roadbuilder_dialog import RoadBuilderDialog
from .result_dialog import ResultDialog
import os.path
from qgis.core import QgsProject
from qgis.PyQt.QtWidgets import QAction,QMessageBox
from qgis.core import (
  QgsApplication,
  QgsDataSourceUri,
  QgsCategorizedSymbolRenderer,
  QgsClassificationRange,
  QgsPointXY,
  QgsProject,
  QgsExpression,
  QgsField,
  QgsFields,
  QgsFeature,
  QgsFeatureRequest,
  QgsFeatureRenderer,
  QgsGeometry,
  QgsGraduatedSymbolRenderer,
  QgsMarkerSymbol,
  QgsMessageLog,
  QgsRectangle,
  QgsRendererCategory,
  QgsRendererRange,
  QgsSymbol,
  QgsVectorDataProvider,
  QgsVectorLayer,
  QgsVectorFileWriter,
  QgsWkbTypes,
  QgsSpatialIndex,
  QgsVectorLayerUtils,
  QgsPoint,
)

from .roadbuild import RoadBuild


class RoadBuilder:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RoadBuilder_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Построитель дорог')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RoadBuilder', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/roadbuilfrom qgis.PyQt.QtWidgets import QAction,QMessageBoxder/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Построитель дорог'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Построитель дорог'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RoadBuilderDialog()

        # show the dialog
        # инициализация диалогового окна
        layer_names = [layer.name() for layer in QgsProject.instance().mapLayers().values()]
        self.dlg.lineEditRoad.setText("road_lines")
        self.dlg.comboBoxPoints.addItems(layer_names)
        self.dlg.comboBoxRelief.addItems(layer_names)        
        
        # Валидируем ввод.
        size_validator = QgsDoubleValidator(0.0001,999.9999,5,None)
        self.dlg.lineEditBufSize.setValidator(size_validator)
        self.dlg.lineEditBufSize.setText("4")
        self.dlg.show()
                       
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            layer_roads_name = self.dlg.lineEditRoad.text()
            buffer_size = float(self.dlg.lineEditBufSize.text())
            layer_points = None
            layers = QgsProject.instance().mapLayersByName(self.dlg.comboBoxPoints.currentText())            
            if len(layers) != 0:
                layer_points = layers[0]
            
            layer_relief = None
            layers = QgsProject.instance().mapLayersByName(self.dlg.comboBoxRelief.currentText())            
            if len(layers) != 0:
                layer_relief = layers[0]

            if layer_points != None and layer_relief != None:
                roads = RoadBuild()
                result_data = roads.createRoads(layer_points, layer_roads_name, buffer_size)
                #QgsMessageLog.logMessage(u"Точки: " + str(layer_points.name()),"RoadBuilder")
                #QgsMessageLog.logMessage(u"Линии: " + str(layer_roads_name),"RoadBuilder")
                #QgsMessageLog.logMessage(u"Рельеф: " + str(layer_relief.name()),"RoadBuilder")
                
                resultDlg = ResultDialog()
                resultDlg.tableWidgetResult.setRowCount(len(result_data))
                resultDlg.tableWidgetResult.setColumnCount(4)
                # Заголовки таблицы
                resultDlg.tableWidgetResult.setHorizontalHeaderLabels(["ID","Сегмент", "Длина", "Площадь"])
 
                #Подсказки для заголовков
                resultDlg.tableWidgetResult.horizontalHeaderItem(0).setToolTip("Идентификатор")
                resultDlg.tableWidgetResult.horizontalHeaderItem(1).setToolTip("Наименование сегмента")
                resultDlg.tableWidgetResult.horizontalHeaderItem(2).setToolTip("Длина, м")
                resultDlg.tableWidgetResult.horizontalHeaderItem(3).setToolTip("Площадь, м2")
         
                # Выравнивание текста
                resultDlg.tableWidgetResult.horizontalHeaderItem(0).setTextAlignment(Qt.AlignLeft)
                resultDlg.tableWidgetResult.horizontalHeaderItem(1).setTextAlignment(Qt.AlignLeft)
                resultDlg.tableWidgetResult.horizontalHeaderItem(2).setTextAlignment(Qt.AlignLeft)
                resultDlg.tableWidgetResult.horizontalHeaderItem(3).setTextAlignment(Qt.AlignLeft)
         
                # Заполнение таблицы
                i = 0
                total_length = 0.0
                total_area   = 0.0
                for str_data in result_data:
                    total_length = total_length + str_data[2]
                    total_area   = total_area + str_data[3]
                    resultDlg.tableWidgetResult.setItem(i, 0, QTableWidgetItem(str(str_data[0])))
                    resultDlg.tableWidgetResult.setItem(i, 1, QTableWidgetItem(str(str_data[1])))
                    resultDlg.tableWidgetResult.setItem(i, 2, QTableWidgetItem('{:10.5f}'.format(str_data[2])))
                    resultDlg.tableWidgetResult.setItem(i, 3, QTableWidgetItem('{:10.5f}'.format(str_data[3])))
                    i = i + 1
                
                resultDlg.lineEditLength.setText('{:10.5f}'.format(total_length))
                resultDlg.lineEditArea.setText('{:10.5f}'.format(total_area))
                
                resultDlg.show()
                result = resultDlg.exec_()
            else:
               QMessageBox.warning(None, u"Ошибка", u'Возникла проблема с указанными параметрами')
               #QgsMessageLog.logMessage(u"Точки: " + str(self.dlg.comboBoxPoints.currentText()),"RoadBuilder")
               #QgsMessageLog.logMessage(u"Линии: " + str(layer_roads_name),"RoadBuilder")
               #QgsMessageLog.logMessage(u"Рельеф: " + str(self.dlg.comboBoxRelief.currentText()),"RoadBuilder")
               #pass
